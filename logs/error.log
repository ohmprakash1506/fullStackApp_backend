2023-06-01 18:24:11:2411 [31merror[39m :[31mThis is error message[39m
2023-06-01 18:29:02:292 [31merror[39m :[31mThis is error message[39m
2023-06-01 18:35:24:3524 [31merror[39m :[31mThis is error message[39m
function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
} 2023-06-01 18:35:55:3555 [31merror[39m :[31mThis is error message[39m
function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
} 2023-06-01 18:36:03:363 [31merror[39m :[31mThis is error message[39m
function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
} 2023-06-01 18:36:12:3612 [31merror[39m :[31mThis is error message[39m
function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
} 2023-06-01 18:36:27:3627 [31merror[39m :[31mThis is error message[39m
2023-06-01 18:36:42:3642 [31merror[39m :[31mThis is error message[39m
 2cf9fe5a-a9d7-49e5-968a-3325fb0763cb 2023-06-02 09:02:39:239 [31merror[39m :[31mThis is error message[39m
 2cf9fe5a-a9d7-49e5-968a-3325fb0763cb 2023-06-02 09:04:48:448 [31merror[39m :[31mThis is error message[39m
 2cf9fe5a-a9d7-49e5-968a-3325fb0763cb 2023-06-02 09:06:40:640 [31merror[39m :[31mThis is error message[39m
 [ebc4c762-e6da-400a-a37a-e20a9f4d6fdc] 2023-06-02 09:10:25:1025 [31merror[39m :[31mThis is error message[39m
 [7136929a-0089-48e5-9635-62771fbbe25c] 2023-06-02 09:11:27:1127 [31merror[39m :[31mThis is error message[39m
 [3998c380-ef98-4b45-b293-70cb16005160] 2023-06-02 09:13:49:1349 [31merror[39m :[31mThis is error message[39m
 [3998c380-ef98-4b45-b293-70cb16005160] 2023-06-02 09:16:06:166 [31merror[39m :[31mThis is error message[39m
 [d76ed2eb-8132-4a50-ba41-4c7f8e32032a] 2023-06-02 09:36:18:3618 [31merror[39m :[31mThis is error message[39m
 [42b4aa94-16d3-405d-8a8a-667d58dfeab3] 2023-06-02 17:26:43:2643 [31merror[39m :[31mThis is error message[39m
 [42b4aa94-16d3-405d-8a8a-667d58dfeab3] 2023-06-02 17:55:39:5539 [31merror[39m :[31mThis is error message[39m
 [452cde74-7e3f-4371-ba1d-828f0cdf113a] 2023-06-05 09:45:37:4537 [31merror[39m :[31mThis is error message[39m
 [ff40d7f4-de11-4f89-95e4-3cfe0ce7b6c4] 2023-06-15 19:43:29:4329 [31merror[39m :[31mThis is error message[39m
 [9186af44-eb37-4bcc-8f85-04615830732a] 2023-06-16 14:19:33:1933 [31merror[39m :[31mThis is error message[39m
